/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "player_count",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__NotCheckUpkeepNeeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETH",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotTransfered",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequstedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterTheRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecenWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101606040523480156200001257600080fd5b506040516200187738038062001877833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508361010081815250508261014081815250508467ffffffffffffffff1660e08167ffffffffffffffff16815250508160a081815250506000600360006101000a81548160ff0219169083600181111562000101576200010062000330565b5b0217905550426002819055508063ffffffff166101208163ffffffff16815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b600067ffffffffffffffff82169050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b6000819050919050565b620001f281620001dd565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001c6565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200023c565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516114a8620003cf600039600081816106760152610882015260006105610152600061051d0152600061053e015260006104e10152600081816103040152610711015260008181610341015261039501526114a86000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063a75dd13214610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101c55780636e04ff0d146101f05780638e00c61f1461022e576100c2565b8063070002de146100c757806309bc33a7146100f2578063115cbaf51461011d5780631fe543e3146101485780633c14f7c7146101715780634585e33b1461019c575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bf7565b60405180910390f35b3480156100fe57600080fd5b50610107610300565b6040516101149190610bf7565b60405180910390f35b34801561012957600080fd5b50610132610328565b60405161013f9190610c89565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610e3d565b61033f565b005b34801561017d57600080fd5b506101866103ff565b6040516101939190610eda565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190610f50565b610429565b005b3480156101d157600080fd5b506101da61061a565b6040516101e79190610bf7565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190611052565b610627565b604051610225929190611135565b60405180910390f35b61023661070f565b005b34801561024457600080fd5b5061024d61087e565b60405161025a9190610bf7565b60405180910390f35b34801561026f57600080fd5b506102786108a6565b6040516102859190610bf7565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611165565b6108b3565b6040516102c29190610eda565b60405180910390f35b3480156102d757600080fd5b506102e06108fa565b6040516102ed9190610bf7565b60405180910390f35b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103e8929190611192565b60405180910390fd5b6103fb8282610906565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061044360405180602001604052806000815250610627565b509050806104b25747600080549050600360009054906101000a900460ff16600181111561047457610473610c12565b5b6040517f6468867f0000000000000000000000000000000000000000000000000000000081526004016104a9939291906111bb565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156104d8576104d7610c12565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105a29594939291906112a5565b6020604051808303816000875af11580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e5919061130d565b9050807f5787897ac6e37574567ab6b1f13760cf73602b333c66ba9ecf1077d9240a2c0160405160405180910390a250505050565b6000600161ffff16905090565b600060606000600360009054906101000a900460ff16600181111561064f5761064e610c12565b5b6000600181111561066357610662610c12565b5b14905060008060008054905011905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106a39190611369565b119050600080471190508380156106b75750825b80156106c05750815b80156106c95750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b7f0000000000000000000000000000000000000000000000000000000000000000341015610769576040517f9894879b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561077d5761077c610c12565b5b600360009054906101000a900460ff16600181111561079f5761079e610c12565b5b146107d6576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b60008082815481106108c8576108c761139d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000600360006101000a81548160ff0219169083600181111561092c5761092b610c12565b5b0217905550600080805490508260008151811061094c5761094b61139d565b5b602002602001015161095e91906113fb565b905060008082815481106109755761097461139d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109fe576109fd610cfa565b5b604051908082528060200260200182016040528015610a2c5781602001602082028036833780820191505090505b5060009080519060200190610a42929190610b37565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a709061145d565b60006040518083038185875af1925050503d8060008114610aad576040519150601f19603f3d011682016040523d82523d6000602084013e610ab2565b606091505b5050905080610aed576040517f9ccbc71000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bb0579160200282015b82811115610baf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b57565b5b509050610bbd9190610bc1565b5090565b5b80821115610bda576000816000905550600101610bc2565b5090565b6000819050919050565b610bf181610bde565b82525050565b6000602082019050610c0c6000830184610be8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c5257610c51610c12565b5b50565b6000819050610c6382610c41565b919050565b6000610c7382610c55565b9050919050565b610c8381610c68565b82525050565b6000602082019050610c9e6000830184610c7a565b92915050565b6000604051905090565b600080fd5b600080fd5b610cc181610bde565b8114610ccc57600080fd5b50565b600081359050610cde81610cb8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d3282610ce9565b810181811067ffffffffffffffff82111715610d5157610d50610cfa565b5b80604052505050565b6000610d64610ca4565b9050610d708282610d29565b919050565b600067ffffffffffffffff821115610d9057610d8f610cfa565b5b602082029050602081019050919050565b600080fd5b6000610db9610db484610d75565b610d5a565b90508083825260208201905060208402830185811115610ddc57610ddb610da1565b5b835b81811015610e055780610df18882610ccf565b845260208401935050602081019050610dde565b5050509392505050565b600082601f830112610e2457610e23610ce4565b5b8135610e34848260208601610da6565b91505092915050565b60008060408385031215610e5457610e53610cae565b5b6000610e6285828601610ccf565b925050602083013567ffffffffffffffff811115610e8357610e82610cb3565b5b610e8f85828601610e0f565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec482610e99565b9050919050565b610ed481610eb9565b82525050565b6000602082019050610eef6000830184610ecb565b92915050565b600080fd5b60008083601f840112610f1057610f0f610ce4565b5b8235905067ffffffffffffffff811115610f2d57610f2c610ef5565b5b602083019150836001820283011115610f4957610f48610da1565b5b9250929050565b60008060208385031215610f6757610f66610cae565b5b600083013567ffffffffffffffff811115610f8557610f84610cb3565b5b610f9185828601610efa565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115610fbd57610fbc610cfa565b5b610fc682610ce9565b9050602081019050919050565b82818337600083830152505050565b6000610ff5610ff084610fa2565b610d5a565b90508281526020810184848401111561101157611010610f9d565b5b61101c848285610fd3565b509392505050565b600082601f83011261103957611038610ce4565b5b8135611049848260208601610fe2565b91505092915050565b60006020828403121561106857611067610cae565b5b600082013567ffffffffffffffff81111561108657611085610cb3565b5b61109284828501611024565b91505092915050565b60008115159050919050565b6110b08161109b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f05780820151818401526020810190506110d5565b60008484015250505050565b6000611107826110b6565b61111181856110c1565b93506111218185602086016110d2565b61112a81610ce9565b840191505092915050565b600060408201905061114a60008301856110a7565b818103602083015261115c81846110fc565b90509392505050565b60006020828403121561117b5761117a610cae565b5b600061118984828501610ccf565b91505092915050565b60006040820190506111a76000830185610ecb565b6111b46020830184610ecb565b9392505050565b60006060820190506111d06000830186610be8565b6111dd6020830185610be8565b6111ea6040830184610be8565b949350505050565b6000819050919050565b611205816111f2565b82525050565b600067ffffffffffffffff82169050919050565b6112288161120b565b82525050565b600061ffff82169050919050565b6112458161122e565b82525050565b600063ffffffff82169050919050565b6112648161124b565b82525050565b6000819050919050565b600061128f61128a6112858461122e565b61126a565b61124b565b9050919050565b61129f81611274565b82525050565b600060a0820190506112ba60008301886111fc565b6112c7602083018761121f565b6112d4604083018661123c565b6112e1606083018561125b565b6112ee6080830184611296565b9695505050505050565b60008151905061130781610cb8565b92915050565b60006020828403121561132357611322610cae565b5b6000611331848285016112f8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137482610bde565b915061137f83610bde565b92508282039050818111156113975761139661133a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140682610bde565b915061141183610bde565b925082611421576114206113cc565b5b828206905092915050565b600081905092915050565b50565b600061144760008361142c565b915061145282611437565b600082019050919050565b60006114688261143a565b915081905091905056fea26469706673582212209af24ce458c3cba61d29e342d52b0b8685958982b0ec4ae527242b8a2533f66464736f6c63430008120033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinator,
      subscriptionId,
      gasLane,
      interval,
      entranceFee,
      callbackGasLimit,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinator,
      subscriptionId,
      gasLane,
      interval,
      entranceFee,
      callbackGasLimit,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}

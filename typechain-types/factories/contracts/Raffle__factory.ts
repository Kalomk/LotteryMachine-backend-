/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "player_count",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__NotCheckUpkeepNeeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETH",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotTransfered",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequstedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterTheRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecenWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101606040523480156200001257600080fd5b506040516200187838038062001878833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508361010081815250508261014081815250508467ffffffffffffffff1660e08167ffffffffffffffff16815250508160a081815250506000600360006101000a81548160ff0219169083600181111562000101576200010062000330565b5b0217905550426002819055508063ffffffff166101208163ffffffff16815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b600067ffffffffffffffff82169050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b6000819050919050565b620001f281620001dd565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001c6565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200023c565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516114a9620003cf600039600081816106770152610883015260006105610152600061051d0152600061053e015260006104e10152600081816103040152610712015260008181610341015261039501526114a96000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063a75dd13214610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101c55780636e04ff0d146101f05780638e00c61f1461022e576100c2565b8063070002de146100c757806309bc33a7146100f2578063115cbaf51461011d5780631fe543e3146101485780633c14f7c7146101715780634585e33b1461019c575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bf8565b60405180910390f35b3480156100fe57600080fd5b50610107610300565b6040516101149190610bf8565b60405180910390f35b34801561012957600080fd5b50610132610328565b60405161013f9190610c8a565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610e3e565b61033f565b005b34801561017d57600080fd5b506101866103ff565b6040516101939190610edb565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190610f51565b610429565b005b3480156101d157600080fd5b506101da61061a565b6040516101e79190610bf8565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190611053565b610627565b604051610225929190611136565b60405180910390f35b610236610710565b005b34801561024457600080fd5b5061024d61087f565b60405161025a9190610bf8565b60405180910390f35b34801561026f57600080fd5b506102786108a7565b6040516102859190610bf8565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611166565b6108b4565b6040516102c29190610edb565b60405180910390f35b3480156102d757600080fd5b506102e06108fb565b6040516102ed9190610bf8565b60405180910390f35b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103e8929190611193565b60405180910390fd5b6103fb8282610907565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061044360405180602001604052806000815250610627565b509050806104b25747600080549050600360009054906101000a900460ff16600181111561047457610473610c13565b5b6040517f6468867f0000000000000000000000000000000000000000000000000000000081526004016104a9939291906111bc565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156104d8576104d7610c13565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105a29594939291906112a6565b6020604051808303816000875af11580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e5919061130e565b9050807f5787897ac6e37574567ab6b1f13760cf73602b333c66ba9ecf1077d9240a2c0160405160405180910390a250505050565b6000600161ffff16905090565b600060606000600360009054906101000a900460ff16600181111561064f5761064e610c13565b5b6000600181111561066357610662610c13565b5b1490506000600160008054905011905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106a4919061136a565b119050600080471190508380156106b85750825b80156106c15750815b80156106ca5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561076a576040517f9894879b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561077e5761077d610c13565b5b600360009054906101000a900460ff1660018111156107a05761079f610c13565b5b146107d7576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b60008082815481106108c9576108c861139e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000600360006101000a81548160ff0219169083600181111561092d5761092c610c13565b5b0217905550600080805490508260008151811061094d5761094c61139e565b5b602002602001015161095f91906113fc565b905060008082815481106109765761097561139e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109ff576109fe610cfb565b5b604051908082528060200260200182016040528015610a2d5781602001602082028036833780820191505090505b5060009080519060200190610a43929190610b38565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a719061145e565b60006040518083038185875af1925050503d8060008114610aae576040519150601f19603f3d011682016040523d82523d6000602084013e610ab3565b606091505b5050905080610aee576040517f9ccbc71000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bb1579160200282015b82811115610bb05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b58565b5b509050610bbe9190610bc2565b5090565b5b80821115610bdb576000816000905550600101610bc3565b5090565b6000819050919050565b610bf281610bdf565b82525050565b6000602082019050610c0d6000830184610be9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c5357610c52610c13565b5b50565b6000819050610c6482610c42565b919050565b6000610c7482610c56565b9050919050565b610c8481610c69565b82525050565b6000602082019050610c9f6000830184610c7b565b92915050565b6000604051905090565b600080fd5b600080fd5b610cc281610bdf565b8114610ccd57600080fd5b50565b600081359050610cdf81610cb9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d3382610cea565b810181811067ffffffffffffffff82111715610d5257610d51610cfb565b5b80604052505050565b6000610d65610ca5565b9050610d718282610d2a565b919050565b600067ffffffffffffffff821115610d9157610d90610cfb565b5b602082029050602081019050919050565b600080fd5b6000610dba610db584610d76565b610d5b565b90508083825260208201905060208402830185811115610ddd57610ddc610da2565b5b835b81811015610e065780610df28882610cd0565b845260208401935050602081019050610ddf565b5050509392505050565b600082601f830112610e2557610e24610ce5565b5b8135610e35848260208601610da7565b91505092915050565b60008060408385031215610e5557610e54610caf565b5b6000610e6385828601610cd0565b925050602083013567ffffffffffffffff811115610e8457610e83610cb4565b5b610e9085828601610e10565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec582610e9a565b9050919050565b610ed581610eba565b82525050565b6000602082019050610ef06000830184610ecc565b92915050565b600080fd5b60008083601f840112610f1157610f10610ce5565b5b8235905067ffffffffffffffff811115610f2e57610f2d610ef6565b5b602083019150836001820283011115610f4a57610f49610da2565b5b9250929050565b60008060208385031215610f6857610f67610caf565b5b600083013567ffffffffffffffff811115610f8657610f85610cb4565b5b610f9285828601610efb565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115610fbe57610fbd610cfb565b5b610fc782610cea565b9050602081019050919050565b82818337600083830152505050565b6000610ff6610ff184610fa3565b610d5b565b90508281526020810184848401111561101257611011610f9e565b5b61101d848285610fd4565b509392505050565b600082601f83011261103a57611039610ce5565b5b813561104a848260208601610fe3565b91505092915050565b60006020828403121561106957611068610caf565b5b600082013567ffffffffffffffff81111561108757611086610cb4565b5b61109384828501611025565b91505092915050565b60008115159050919050565b6110b18161109c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f15780820151818401526020810190506110d6565b60008484015250505050565b6000611108826110b7565b61111281856110c2565b93506111228185602086016110d3565b61112b81610cea565b840191505092915050565b600060408201905061114b60008301856110a8565b818103602083015261115d81846110fd565b90509392505050565b60006020828403121561117c5761117b610caf565b5b600061118a84828501610cd0565b91505092915050565b60006040820190506111a86000830185610ecc565b6111b56020830184610ecc565b9392505050565b60006060820190506111d16000830186610be9565b6111de6020830185610be9565b6111eb6040830184610be9565b949350505050565b6000819050919050565b611206816111f3565b82525050565b600067ffffffffffffffff82169050919050565b6112298161120c565b82525050565b600061ffff82169050919050565b6112468161122f565b82525050565b600063ffffffff82169050919050565b6112658161124c565b82525050565b6000819050919050565b600061129061128b6112868461122f565b61126b565b61124c565b9050919050565b6112a081611275565b82525050565b600060a0820190506112bb60008301886111fd565b6112c86020830187611220565b6112d5604083018661123d565b6112e2606083018561125c565b6112ef6080830184611297565b9695505050505050565b60008151905061130881610cb9565b92915050565b60006020828403121561132457611323610caf565b5b6000611332848285016112f9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137582610bdf565b915061138083610bdf565b92508282039050818111156113985761139761133b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140782610bdf565b915061141283610bdf565b925082611422576114216113cd565b5b828206905092915050565b600081905092915050565b50565b600061144860008361142d565b915061145382611438565b600082019050919050565b60006114698261143b565b915081905091905056fea264697066735822122041d51ad2c2473028d7bbec25d1175df3b5ab713638daab039d2fc246252161f264736f6c63430008120033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinator,
      subscriptionId,
      gasLane,
      interval,
      entranceFee,
      callbackGasLimit,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinator,
      subscriptionId,
      gasLane,
      interval,
      entranceFee,
      callbackGasLimit,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
